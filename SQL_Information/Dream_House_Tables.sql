-------------  User Management / Security --------- 
--  DH_UserAccount
-- Handle different types of users (clients, owners, staff, admin) and login/authentication

CREATE TABLE DH_UserAccount (
    userID VARCHAR2(50) PRIMARY KEY,
    username VARCHAR2(50) UNIQUE NOT NULL,
    password VARCHAR2(100) NOT NULL, -- hashed password
    role VARCHAR2(20) NOT NULL CHECK (role IN ('client', 'staff', 'owner', 'admin')),
    --email VARCHAR2(100) UNIQUE, -- removing email since it is in DH_Staff
    status VARCHAR2(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive', 'suspended')),
    staffNo VARCHAR2(10),
    CONSTRAINT fk_user_staff FOREIGN KEY (staffNo) REFERENCES DH_Staff(staffNo)
);

COMMIT;

-- DH_LoginHistory
-- Login events for security/audit
CREATE TABLE DH_LoginHistory (
    loginID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userID VARCHAR2(50) NOT NULL,
    loginTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ipAddress VARCHAR2(50),
    CONSTRAINT fk_login_user FOREIGN KEY (userID) REFERENCES DH_UserAccount(userID)
);

CREATE INDEX idx_login_user ON DH_LoginHistory(userID);

COMMIT;


-------------   Content & Listings Management ---------
-- DH_PropertyFeatures
-- List extra features per property
CREATE TABLE DH_PropertyFeatures (
    featureID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    propertyNo VARCHAR2(10) NOT NULL,
    featureName VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_feature_property FOREIGN KEY (propertyNo) REFERENCES DH_PropertyForRent(propertyNo)
);

CREATE INDEX idx_feature_property ON DH_PropertyFeatures(propertyNo);



-- DH_PropertyImages
-- Store multiple images per property for gallery
CREATE TABLE DH_PropertyImages (
    imageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    propertyNo VARCHAR2(10) NOT NULL,
    imagePath VARCHAR2(255) NOT NULL,
    caption VARCHAR2(100) DEFAULT NULL,
    CONSTRAINT fk_image_property FOREIGN KEY (propertyNo) REFERENCES DH_PropertyForRent(propertyNo)
);

CREATE INDEX idx_image_property ON DH_PropertyImages(propertyNo);

-- DH_NewsletterSubscription
-- If clients can subscribe to newsletters or alerts.
CREATE TABLE DH_NewsletterSubscription (
    email VARCHAR2(100) PRIMARY KEY,
    subscribedOn DATE DEFAULT SYSDATE
);

-------------  Content & Listings Management ---------
-- DH_ContactFormMessages
-- To store messages from a website contact form.
CREATE TABLE DH_ContactFormMessages (
    messageID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    subject VARCHAR2(200),
    message VARCHAR2(1000),
    submittedOn TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- DH_Feedback   
-- Collect feedback on staff or service.
CREATE TABLE DH_Feedback (
    feedbackID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    clientNo VARCHAR2(10),
    staffNo VARCHAR2(10),
    rating NUMBER(1) CHECK (rating BETWEEN 1 AND 5),
    comment VARCHAR2(255),
    submittedOn DATE DEFAULT SYSDATE,
    CONSTRAINT fk_feedback_client FOREIGN KEY (clientNo) REFERENCES DH_Client(clientNo),
    CONSTRAINT fk_feedback_staff FOREIGN KEY (staffNo) REFERENCES DH_Staff(staffNo)
);

CREATE INDEX idx_feedback_client ON DH_Feedback(clientNo);
CREATE INDEX idx_feedback_staff ON DH_Feedback(staffNo);


-------------   Billing & Transactions ---------
-- DH_Payment
-- Record payments related to leases (rent payments)
CREATE TABLE DH_Payment (
    paymentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    leaseNo NUMBER NOT NULL,
    paymentDate DATE DEFAULT SYSDATE NOT NULL,
    amount NUMBER(9,2) CHECK (amount >= 0),
    method VARCHAR2(20),
    CONSTRAINT fk_payment_lease FOREIGN KEY (leaseNo) REFERENCES DH_Lease(leaseNo)
);

CREATE INDEX idx_payment_lease ON DH_Payment(leaseNo);



-- DH_AuditLog
-- Track changes for security and history.
CREATE TABLE DH_AuditLog (
    logID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tableName VARCHAR2(50) NOT NULL,
    operationType VARCHAR2(10) CHECK (operationType IN ('INSERT', 'UPDATE', 'DELETE')),
    recordID VARCHAR2(50),
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    performedBy VARCHAR2(50)
);


-- DH_SavedProperties
-- To let clients save/favorite properties they like.
CREATE TABLE DH_SavedProperties (
    clientNo VARCHAR2(10) NOT NULL,
    propertyNo VARCHAR2(10) NOT NULL,
    savedOn DATE DEFAULT SYSDATE,
    PRIMARY KEY (clientNo, propertyNo),
    CONSTRAINT fk_saved_client FOREIGN KEY (clientNo) REFERENCES DH_Client(clientNo),
    CONSTRAINT fk_saved_property FOREIGN KEY (propertyNo) REFERENCES DH_PropertyForRent(propertyNo)
);

CREATE INDEX idx_saved_client ON DH_SavedProperties(clientNo);
CREATE INDEX idx_saved_property ON DH_SavedProperties(propertyNo);



-------------  Location & Geodata ---------
-- DH_City
-- To standardize city data and avoid duplicates/misspellings.

CREATE TABLE DH_City (
    cityID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cityName VARCHAR2(50) NOT NULL UNIQUE,
    region VARCHAR2(50),
    country VARCHAR2(50) NOT NULL
);


-- DH_Area
-- Sub-regions/neighborhoods (optional for search filters).
CREATE TABLE DH_Area (
    areaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    cityID NUMBER NOT NULL,
    areaName VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_area_city FOREIGN KEY (cityID) REFERENCES DH_City(cityID),
    CONSTRAINT uq_area_city UNIQUE (cityID, areaName)
);

-------------  Property Listing Management ---------
-- DH_PropertyStatus
-- Status options for a property (available, leased, under offer, etc.).
CREATE TABLE DH_PropertyStatus (
    statusID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    statusName VARCHAR2(30) NOT NULL UNIQUE -- e.g., Available, Rented, Sold, Under Offer
);


-- And then update your DH_PropertyForRent table:
ALTER TABLE DH_PropertyForRent ADD statusID NUMBER;
ALTER TABLE DH_PropertyForRent ADD CONSTRAINT FK_PropertyStatus FOREIGN KEY (statusID) REFERENCES DH_PropertyStatus(statusID);


-------------  Document Management ---------
-- DH_Document
-- To store legal documents such as lease agreements, ownership documents, etc.
CREATE TABLE DH_Document (
    documentID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    relatedID VARCHAR2(50), -- could be leaseNo, propertyNo, or clientNo
    documentType VARCHAR2(50), -- e.g., "Lease", "ID Proof"
    filePath VARCHAR2(255),
    uploadedBy VARCHAR2(50),
    uploadDate DATE DEFAULT SYSDATE
);


-------------  SEO and Property Visibility ---------
-- DH_Tag
-- Used for tagging properties (e.g., “sea view”, “new build”, “pet friendly”).
CREATE TABLE DH_Tag (
    tagID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tagName VARCHAR2(50) UNIQUE NOT NULL
);

-- DH_PropertyTags
-- Join table for many-to-many relationship.
CREATE TABLE DH_PropertyTags (
    propertyNo VARCHAR2(10) NOT NULL,
    tagID NUMBER NOT NULL,
    PRIMARY KEY (propertyNo, tagID),
    CONSTRAINT fk_propertytags_property FOREIGN KEY (propertyNo) REFERENCES DH_PropertyForRent(propertyNo),
    CONSTRAINT fk_propertytags_tag FOREIGN KEY (tagID) REFERENCES DH_Tag(tagID)
);

CREATE INDEX idx_propertytags_property ON DH_PropertyTags(propertyNo);
CREATE INDEX idx_propertytags_tag ON DH_PropertyTags(tagID);



-- Property Type Lookup
CREATE TABLE DH_PropertyType (
    typeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    typeName VARCHAR2(30) NOT NULL UNIQUE -- e.g., House, Flat
);



-------------  Admin/Operations ---------
-- DH_AdminNote
-- Internal notes by staff for properties or clients (e.g., fraud alerts, pending documents).
CREATE TABLE DH_AdminNote (
    noteID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    relatedEntity VARCHAR2(50),
    note CLOB,
    createdBy VARCHAR2(50),
    createdOn DATE DEFAULT SYSDATE
);


-------------  Agent-Specific Features ---------
-- DH_StaffSchedule
-- Track availability of agents/staff for viewings or meetings.
CREATE TABLE DH_StaffSchedule (
    scheduleID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    staffNo VARCHAR2(10) NOT NULL,
    availableDate DATE NOT NULL,
    availableTime VARCHAR2(20),
    booked NUMBER(1) DEFAULT 0 CHECK (booked IN (0,1)),
    CONSTRAINT fk_schedule_staff FOREIGN KEY (staffNo) REFERENCES DH_Staff(staffNo)
);

CREATE INDEX idx_schedule_staff ON DH_StaffSchedule(staffNo);

-------------  Mobile Compatibility & Notifications ---------
-- DH_Notification
-- For in-site or email/SMS alerts (e.g., “New property matches your preferences”).
CREATE TABLE DH_Notification (
    notificationID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userID VARCHAR2(50) NOT NULL,
    message VARCHAR2(200) NOT NULL,
    sentDate DATE DEFAULT SYSDATE,
    readStatus CHAR(1) DEFAULT 'N' CHECK (readStatus IN ('Y', 'N')),
    CONSTRAINT fk_notification_user FOREIGN KEY (userID) REFERENCES DH_UserAccount(userID)
);

CREATE INDEX idx_notification_user ON DH_Notification(userID);

------------- Support & Help Desk ---------
-- DH_Ticket
-- For managing client support or complaints.
CREATE TABLE DH_Ticket (
    ticketID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    clientNo VARCHAR2(10) NOT NULL,
    issueDescription VARCHAR2(500) NOT NULL,
    status VARCHAR2(20) DEFAULT 'Open' CHECK (status IN ('Open', 'In Progress', 'Resolved', 'Closed')),
    createdOn DATE DEFAULT SYSDATE,
    resolvedOn DATE,
    CONSTRAINT fk_ticket_client FOREIGN KEY (clientNo) REFERENCES DH_Client(clientNo)
);

CREATE INDEX idx_ticket_client ON DH_Ticket(clientNo);

